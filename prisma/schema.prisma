// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

generator zod {
  provider                  = "zod-prisma-types"
  output                    = "./zod"
  createRelationValuesTypes = true
  useTypeAssertions         = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

/// @zod.strip()
model User {
  id            String             @id @default(cuid())
  /// @zod.string.trim().min(1).max(255)
  name          String?
  /// @zod.string.trim().min(1).max(255)
  email         String             @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workspaces    WorkspaceMembers[]
  issues        Issue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// @zod.strip()
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

/// @zod.strip()
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// @zod.strip()
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

/// @zod.strip()
// model Subscription {
//   userId                 String    @unique
//   user                   User      @relation(fields: [userId], references: [id])
//   stripeCustomerId       String    @unique @map(name: "stripe_customer_id")
//   stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
//   stripePriceId          String?   @map(name: "stripe_price_id")
//   stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

//   @@id([userId, stripeCustomerId])
// }

/// @zod.strip()
model Workspace {
  id         String             @id @default(cuid())
  /// @zod.string.trim().min(1).max(255)
  name       String
  image      String?
  issueCount Int                @default(0)
  members    WorkspaceMembers[]
  issues     Issue[]
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

/// @zod.strip()
model WorkspaceMembers {
  id          String    @id @default(cuid())
  role        Role
  userId      String
  workspaceId String
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
}

enum Status {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
  CANCELED
}

enum Priority {
  NO_PRIORITY
  URGENT
  HIGH
  MEDIUM
  LOW
}

/// @zod.strip()
model Issue {
  id          String    @id @default(cuid())
  identifier  Int
  /// @zod.string.trim().min(1).max(255)
  title       String
  description Bytes?
  status      Status    @default(BACKLOG)
  priority    Priority  @default(NO_PRIORITY)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  assigneeId  String
  assignee    User      @relation(fields: [assigneeId], references: [id])
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([identifier, workspaceId])
}

/// @zod.strip()
model Comment {
  id        String   @id @default(cuid())
  /// @zod.string.trim().min(1).max(255)
  body      String
  issueId   String
  issue     Issue    @relation(fields: [issueId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
