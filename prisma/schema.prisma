// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                  = "zod-prisma-types"
  output                    = "./zod"
  createRelationValuesTypes = true
  useTypeAssertions         = true
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  userId  String   @unique
  token   String   @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token])
}

model Subscription {
  userId                 String    @unique
  user                   User      @relation(fields: [userId], references: [id])
  stripeCustomerId       String    @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@id([userId, stripeCustomerId])
}

model User {
  id                String             @id @default(cuid())
  /// @zod.string.trim().min(1).max(255)
  name              String
  /// @zod.string.trim().min(1).max(255)
  email             String             @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  subscription      Subscription?
  VerificationToken VerificationToken?
  Workspaces        Workspace[]
}

model Workspace {
  id      String  @id @default(cuid())
  name    String  @unique /// @zod.string.trim().min(1).max(255)
  ownerId String
  members User[]
  issues  Issue[]
}

model Issue {
  id          String    @id @default(cuid())
  /// @zod.string.trim().min(1).max(255)
  title       String
  /// @zod.string.trim().min(1).max(255)
  description String?
  status      String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  assigneeId  String?
  reporterId  String
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  /// @zod.string.trim().min(1).max(255)
  body      String
  issueId   String
  issue     Issue    @relation(fields: [issueId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
