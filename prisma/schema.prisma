generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

generator zod {
  provider                  = "zod-prisma-types"
  output                    = "./zod"
  createRelationValuesTypes = true
  createPartialTypes        = true
  useTypeAssertions         = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

/// @zod.strip()
model User {
  id                    String                  @id @default(cuid())
  /// @zod.string.trim().min(1).max(255)
  name                  String
  /// @zod.string.trim().min(1).max(255)
  email                 String                  @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  workspaces            WorkspaceMember[]
  issues                Issue[]
  workspacesInvites     WorkspaceInvite[]
  comments              Comment[]
  githubAppInstallation GithubAppInstallation[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

/// @zod.strip()
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

/// @zod.strip()
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// @zod.strip()
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

/// @zod.strip()
// model Subscription {
//   userId                 String    @unique
//   user                   User      @relation(fields: [userId], references: [id])
//   stripeCustomerId       String    @unique @map(name: "stripe_customer_id")
//   stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
//   stripePriceId          String?   @map(name: "stripe_price_id")
//   stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

//   @@id([userId, stripeCustomerId])
// }

/// @zod.strip()
model Workspace {
  id                    String                  @id @default(cuid())
  /// @zod.string.trim().min(1).max(255)
  name                  String
  image                 String?
  issueCount            Int                     @default(0)
  members               WorkspaceMember[]
  issues                Issue[]
  workspaceInvite       WorkspaceInvite[]
  githubAppInstallation GithubAppInstallation[]
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

/// @zod.strip()
model WorkspaceMember {
  id          String    @id @default(cuid())
  role        Role      @default(MEMBER)
  userId      String
  workspaceId String
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@unique([userId, workspaceId])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

/// @zod.strip()
model WorkspaceInvite {
  id          String       @id @default(cuid())
  /// @zod.string.email().trim().max(255)
  email       String
  workspaceId String
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitedById String
  invitedBy   User         @relation(fields: [invitedById], references: [id], onDelete: Cascade)
  status      InviteStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([email, workspaceId])
}

enum Status {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
  CANCELED
}

enum Priority {
  NO_PRIORITY
  URGENT
  HIGH
  MEDIUM
  LOW
}

/// @zod.strip()
model Issue {
  id          String    @id @default(cuid())
  identifier  Int
  /// @zod.string.trim().min(1).max(255)
  title       String
  description Bytes?
  status      Status    @default(BACKLOG)
  priority    Priority  @default(NO_PRIORITY)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  assigneeId  String
  assignee    User      @relation(fields: [assigneeId], references: [id])
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([identifier, workspaceId])
}

/// @zod.strip()
model Comment {
  id        String    @id @default(cuid())
  /// @zod.string.trim().min(1).max(1000)
  body      String
  isEdited  Boolean   @default(false)
  issueId   String
  issue     Issue     @relation(fields: [issueId], references: [id])
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("CommentToComment")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

/// @zod.strip()
model GithubAppInstallation {
  id             Int              @id
  workspaceId    String
  workspace      Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdById    String
  createdBy      User             @relation(fields: [createdById], references: [id], onDelete: Cascade)
  githubWikiFile GithubWikiFile[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

/// @zod.strip()
model GithubWikiFile {
  id                 String                @id @default(cuid())
  /// @zod.string.trim().min(1).max(255)
  path               String
  /// @zod.string.trim().min(1).max(255)
  previousPath       String?
  installationId     Int
  installation       GithubAppInstallation @relation(fields: [installationId], references: [id], onDelete: Cascade)
  githubRepositoryId Int
  content            Bytes?
  isModified         Boolean               @default(false)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt

  @@unique([path, githubRepositoryId])
}
