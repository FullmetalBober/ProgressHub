generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

generator zod {
  provider                  = "zod-prisma-types"
  output                    = "./zod"
  createRelationValuesTypes = true
  createPartialTypes        = true
  useTypeAssertions         = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// @zod.strip()
model User {
  id                    String                  @id @default(cuid())
  /// @zod.string.trim().min(1, { message: "Надто коротко! Поле мусить мати хоча б 1 символ" }).max(255, { message: "Надто багато! Поле мусить мати не більше 255 символів" })
  name                  String
  /// @zod.string.trim().email({ message: 'Ви впевнені, що email вірний?' }).min(1, { message: "Надто коротко! Поле мусить мати хоча б 1 символ" }).max(255, { message: "Надто багато! Поле мусить мати не більше 255 символів" })
  email                 String                  @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  workspaces            WorkspaceMember[]
  issues                Issue[]
  comments              Comment[]
  githubAppInstallation GithubAppInstallation[]
  notifications         Notification[]          @relation("NotificationRecipient")
  notificationsSent     Notification[]          @relation("NotificationSender")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

/// @zod.strip()
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

/// @zod.strip()
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// @zod.strip()
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

/// @zod.strip()
model Workspace {
  id                    String                  @id @default(cuid())
  /// @zod.string.trim().min(1, { message: "Надто коротко! Поле мусить мати хоча б 1 символ" }).max(255, { message: "Надто багато! Поле мусить мати не більше 255 символів" })
  name                  String
  image                 String?
  issueCount            Int                     @default(0)
  members               WorkspaceMember[]
  issues                Issue[]
  workspaceInvite       WorkspaceInvite[]
  githubAppInstallation GithubAppInstallation[]
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

/// @zod.strip()
model WorkspaceMember {
  id          String        @id @default(cuid())
  role        WorkspaceRole @default(MEMBER)
  userId      String
  workspaceId String
  user        User          @relation(fields: [userId], references: [id])
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())

  @@unique([userId, workspaceId])
}

enum WorkspaceInviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

/// @zod.strip()
model WorkspaceInvite {
  id          String                @id @default(cuid())
  /// @zod.string.trim().email({ message: 'Ви впевнені, що email вірний?' }).max(255, { message: "Надто багато! Поле мусить мати не більше 255 символів" })
  email       String
  workspaceId String
  workspace   Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitedById String
  status      WorkspaceInviteStatus @default(PENDING)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  @@unique([email, workspaceId])
}

enum IssueStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELED
}

enum IssuePriority {
  NO_PRIORITY
  URGENT
  HIGH
  MEDIUM
  LOW
}

/// @zod.strip()
model Issue {
  id            String         @id @default(cuid())
  identifier    Int
  /// @zod.string.trim().min(1, { message: "Надто коротко! Поле мусить мати хоча б 1 символ" }).max(255, { message: "Надто багато! Поле мусить мати не більше 255 символів" })
  title         String
  description   Bytes?
  status        IssueStatus    @default(BACKLOG)
  priority      IssuePriority  @default(NO_PRIORITY)
  workspaceId   String
  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  assigneeId    String
  assignee      User           @relation(fields: [assigneeId], references: [id])
  comments      Comment[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([identifier, workspaceId])
}

/// @zod.strip()
model Comment {
  id        String    @id @default(cuid())
  /// @zod.string.trim().min(1, { message: "Надто коротко! Поле мусить мати хоча б 1 символ" }).max(4500, { message: "Надто багато! Поле мусить мати не більше 4500 символів" })
  body      String
  isEdited  Boolean   @default(false)
  issueId   String
  issue     Issue     @relation(fields: [issueId], references: [id], onDelete: Cascade)
  isSystem  Boolean   @default(false)
  authorId  String?
  author    User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("CommentToComment")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

/// @zod.strip()
model GithubAppInstallation {
  id             Int              @id
  workspaceId    String
  workspace      Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdById    String
  createdBy      User             @relation(fields: [createdById], references: [id], onDelete: Cascade)
  githubWikiFile GithubWikiFile[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

/// @zod.strip()
model GithubWikiFile {
  id                 String                @id @default(cuid())
  /// @zod.string.trim().min(1, { message: "Надто коротко! Поле мусить мати хоча б 1 символ" }).max(255, { message: "Надто багато! Поле мусить мати не більше 255 символів" })
  path               String
  /// @zod.string.trim().min(1, { message: "Надто коротко! Поле мусить мати хоча б 1 символ" }).max(255, { message: "Надто багато! Поле мусить мати не більше 255 символів" })
  previousPath       String?
  installationId     Int
  installation       GithubAppInstallation @relation(fields: [installationId], references: [id], onDelete: Cascade)
  githubRepositoryId Int
  content            Bytes?
  isModified         Boolean               @default(false)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt

  @@unique([path, githubRepositoryId])
}

/// @zod.strip()
model Notification {
  id          String   @id @default(cuid())
  /// @zod.string.trim().min(1, { message: "Надто коротко! Поле мусить мати хоча б 1 символ" }).max(500, { message: "Надто багато! Поле мусить мати не більше 500 символів" })
  message     String
  issueId     String?
  issue       Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  isRead      Boolean  @default(false)
  isEmailSent Boolean  @default(false)
  senderId    String
  sender      User     @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId String
  recipient   User     @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
